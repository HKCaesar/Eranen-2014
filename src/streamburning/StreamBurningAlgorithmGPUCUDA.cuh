/**
 * Copyright 2014 Finnish Geodetic Institute
 *
 * Programmers: David Eränen and Ville Mäkinen
 *
 * This file is part of the drainage program. It is released under the GNU
 * Lesser General Public Licence version 3.
 *
 *
 * This software contains source code provided by NVIDIA Corporation.
 *
 *
 * \file StreamBurningAlgorithmGPUCUDA.h
 */

#ifndef STREAMBURNINGALGORITHMGPUCUDA_H_
#define STREAMBURNINGALGORITHMGPUCUDA_H_

#include "StreamBurningAlgorithm.h"
#include "CellGrid.h"

/**
 * \brief A CUDA implementation of the StreamBurningAlgorithm.
 */
template<typename T, typename U>
class StreamBurningAlgorithm_GPU_CUDA : public StreamBurningAlgorithm<T, U> {
public:
    /** \copydoc StreamBurningAlgorithm::StreamBurningAlgorithm() */
	StreamBurningAlgorithm_GPU_CUDA() {};
    /** \copydoc StreamBurningAlgorithm::~StreamBurningAlgorithm() */
	virtual ~StreamBurningAlgorithm_GPU_CUDA() {};

    /**
     * \brief Transfer the data to the DEVICE and start the stream burning
     * process.
     */
	void performStreamBurning(
			CellGrid<T>* output,
			CellGrid<T>* dem,
			CellGrid<U>* streams);

private:
    /**
     * \brief Copy the list of shortest translation vectors (generated by
     * StreamBurningAlgorithm) from HOST to the DEVICE.
     */
	void cudaMemcpyCircularSearchArrayToSymbol(
			CoordOffset* h_circularSeachArray);

    /**
     * \brief Calculate the CUDA parameters and launch the appropriate number
     * of createStreamBurnTemplateKernel() CUDA kernels.
     */
    void createStreamBurnTemplate_CUDA( CellGrid<T>* streamBurn,
			CellGrid<U>* streams);
};

/**
 * \brief A CUDA kernel to burn the stream information with beveling on the \a
 * streamBurnTemplate.
 */
template<typename T, typename U>
__global__
void createStreamBurnTemplateKernel(
		T* streamBurnTemplate,
		U* streamData,
		U noDataValue,
		int bevelRadius,
		int width, int height);

#endif /* STREAMBURNINGALGORITHMGPUCUDA_H_ */
